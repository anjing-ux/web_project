{"remainingRequest":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\director\\dashboard\\components\\PieChart.vue?vue&type=script&lang=ts&","dependencies":[{"path":"G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\director\\dashboard\\components\\PieChart.vue","mtime":1748448116000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\nimport { Component, Vue, Prop, Watch } from 'vue-property-decorator';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\n@Component\nexport default class PieChart extends Vue {\n  @Prop({ required: true }) private chartData!: any;\n  \n  private chartInstance: Chart | null = null;\n  \n  mounted() {\n    this.renderChart();\n  }\n  \n  @Watch('chartData', { deep: true })\n  private onChartDataChange() {\n    this.renderChart();\n  }\n  \n  private renderChart() {\n    const ctx = (this.$refs.pieChart as HTMLCanvasElement).getContext('2d');\n    \n    if (this.chartInstance) {\n      this.chartInstance.destroy();\n    }\n    \n    if (ctx) {\n      this.chartInstance = new Chart(ctx, {\n        type: 'pie',\n        data: this.chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'right',\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\n                  const percentage = Math.round((value / total) * 100);\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  \n  beforeDestroy() {\n    if (this.chartInstance) {\n      this.chartInstance.destroy();\n    }\n  }\n}\n",{"version":3,"sources":["PieChart.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"PieChart.vue","sourceRoot":"src/views/director/dashboard/components","sourcesContent":["<template>\r\n    <div class=\"pie-chart-container\">\r\n      <canvas ref=\"pieChart\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\">\r\n  import { Component, Vue, Prop, Watch } from 'vue-property-decorator';\r\n  import { Chart, registerables } from 'chart.js';\r\n  \r\n  Chart.register(...registerables);\r\n  \r\n  @Component\r\n  export default class PieChart extends Vue {\r\n    @Prop({ required: true }) private chartData!: any;\r\n    \r\n    private chartInstance: Chart | null = null;\r\n    \r\n    mounted() {\r\n      this.renderChart();\r\n    }\r\n    \r\n    @Watch('chartData', { deep: true })\r\n    private onChartDataChange() {\r\n      this.renderChart();\r\n    }\r\n    \r\n    private renderChart() {\r\n      const ctx = (this.$refs.pieChart as HTMLCanvasElement).getContext('2d');\r\n      \r\n      if (this.chartInstance) {\r\n        this.chartInstance.destroy();\r\n      }\r\n      \r\n      if (ctx) {\r\n        this.chartInstance = new Chart(ctx, {\r\n          type: 'pie',\r\n          data: this.chartData,\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              legend: {\r\n                position: 'right',\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    const label = context.label || '';\r\n                    const value = context.raw || 0;\r\n                    const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\r\n                    const percentage = Math.round((value / total) * 100);\r\n                    return `${label}: ${value} (${percentage}%)`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    beforeDestroy() {\r\n      if (this.chartInstance) {\r\n        this.chartInstance.destroy();\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .pie-chart-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  </style>"]}]}