{"remainingRequest":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\teamLeader\\deviceReview\\faultClear.vue?vue&type=script&lang=ts&","dependencies":[{"path":"G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\teamLeader\\deviceReview\\faultClear.vue","mtime":1747301540546},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue } from 'vue-property-decorator'\nimport HeadLable from '@/components/HeadLable/index.vue'\nimport InputAutoComplete from '@/components/InputAutoComplete/index.vue'\nimport {\n  getFaultClearList,\n  getFaultClearListBy4Status,\n  queryFaultClearById,\n  auditFaultClear,\n  refuseFaultClear\n} from '@/api/faultClear' // 假设有这些API，实际使用时需要替换为真实的API\n\n@Component({\n  name: 'FaultClear',\n  components: {\n    HeadLable,\n    InputAutoComplete\n  }\n})\nexport default class extends Vue {\n  private equipmentName: string = ''\n  private counts: number = 0\n  private page: number = 1\n  private pageSize: number = 10\n  private tableData: any[] = []\n  private faultStatus: number = 0 // 0-全部审核请求 1-待完成 2-待审核 3-已完成\n  private dialogVisible: boolean = false\n  private confirmDialogVisible: boolean = false\n  private diaForm: any = {}\n  private row: any = {}\n  private requestCode: string = ''\n  private dialogFaultStatus: number = 0\n  private confirmStatus: string = ''\n  private approvalComment: string = ''\n  private remark: string = ''\n  private statusList: any[] = [\n    { name: '全部审核请求', count: 0 },\n    { name: '待完成', count: 0 },\n    { name: '待审核', count: 0 },\n    { name: '已完成', count: 0 }\n  ]\n  private passReasons: string[] = ['设备已修复', '故障已解决', '问题已处理', '自定义原因']\n  private rejectReasons: string[] = ['信息不完整', '需要补充材料', '申请不符合规定', '自定义原因']\n\n  created() {\n    this.init()\n    this.getFaultClearListBy4Status()\n  }\n\n  // 初始化数据\n  private async init(activeIndex: number = this.faultStatus) {\n    const params = {\n      page: this.page,\n      pageSize: this.pageSize,\n      equipmentName: this.equipmentName,\n      status: activeIndex\n    }\n    try {\n      const res = await getFaultClearList(params)\n      if (res.data.code === 1) {\n        this.tableData = res.data.data.records\n        this.faultStatus = activeIndex\n        this.counts = Number(res.data.data.total)\n        this.getFaultClearListBy4Status()\n      } else {\n        this.$message.error(res.data.msg)\n      }\n    } catch (err) {\n      this.$message.error('请求出错了：' + err.message)\n    }\n  }\n\n  // 获取四种状态的数量\n  private async getFaultClearListBy4Status() {\n    try {\n      const res = await getFaultClearListBy4Status()\n      if (res.data.code === 1) {\n        this.statusList[0].count = res.data.data.all || 0\n        this.statusList[1].count = res.data.data.pending || 0\n        this.statusList[2].count = res.data.data.toBeReviewed || 0\n        this.statusList[3].count = res.data.data.completed || 0\n      }\n    } catch (err) {\n      console.error('获取状态数量失败：', err)\n    }\n  }\n\n  // 切换状态标签\n  private handleStatus(index: number) {\n    this.page = 1\n    this.init(index)\n  }\n\n  // 搜索设备名称\n  private initProp(val: string) {\n    this.equipmentName = val\n    this.initFun()\n  }\n\n  // 执行搜索\n  private initFun() {\n    this.page = 1\n    this.init()\n  }\n\n  // 重置搜索\n  private resetSearch() {\n    this.equipmentName = ''\n    this.page = 1\n    this.init()\n  }\n\n  // 分页大小变化\n  private handleSizeChange(val: number) {\n    this.pageSize = val\n    this.init()\n  }\n\n  // 页码变化\n  private handleCurrentChange(val: number) {\n    this.page = val\n    this.init()\n  }\n\n  // 关闭弹窗\n  private handleClose() {\n    this.dialogVisible = false\n  }\n\n  // 获取故障状态文本\n  private getFaultStatus(row: any) {\n    if (row.status === 0) {\n      return '待审核'\n    } else if (row.status === 1) {\n      return '待完成'\n    } else if (row.status === 2) {\n      return '已完成'\n    } else if (row.status === 3) {\n      return '已驳回'\n    } else {\n      return '状态错误'\n    }\n  }\n\n  // 获取设备类型文本\n  private getEquimentType(row: any) {\n    if (row.equipmentType === 1) {\n      return '客服设备'\n    } else if (row.equipmentType === 2) {\n      return '机电设备'\n    } else if (row.equipmentType === 3) {\n      return '消防设备'\n    } else if (row.equipmentType === 4) {\n      return '电梯设备'\n    } else {\n      return '状态错误'\n    }\n  }\n\n  // 查看详情\n  private async goDetail(id: string, status: number, row: any) {\n    this.diaForm = {}\n    this.dialogVisible = true\n    this.dialogFaultStatus = status\n    this.requestCode = id\n    try {\n      const { data } = await queryFaultClearById({ requestCode: id })\n      if (data.code === 1) {\n        this.diaForm = data.data\n        this.row = row\n      } else {\n        this.$message.error(data.msg)\n      }\n    } catch (err) {\n      this.$message.error('请求出错了：' + err.message)\n    }\n  }\n\n  // 审核通过\n  private passFault(row: any) {\n    this.confirmDialogVisible = true\n    this.requestCode = row.requestCode\n    this.confirmStatus = '审核通过确认'\n    this.dialogFaultStatus = row.status\n    this.dialogVisible = false\n    this.approvalComment = ''\n    this.remark = ''\n  }\n\n  // 审核不通过\n  private refuseFault(row: any) {\n    this.confirmDialogVisible = true\n    this.requestCode = row.requestCode\n    this.confirmStatus = '审核不通过确认'\n    this.dialogFaultStatus = row.status\n    this.dialogVisible = false\n    this.approvalComment = ''\n    this.remark = ''\n  }\n\n  // 确认审核\n  private async confirmAudit() {\n    if (!this.approvalComment) {\n      return this.$message.error(`请选择${this.confirmStatus}原因`)\n    } else if (this.approvalComment === '自定义原因' && !this.remark) {\n      return this.$message.error(`请输入${this.confirmStatus}原因`)\n    }\n\n    const api = this.confirmStatus === '审核不通过确认' ? refuseFaultClear : auditFaultClear\n    try {\n      const res = await api({\n        requestCode: this.requestCode,\n        status: this.confirmStatus === '审核不通过确认' ? 3 : 1,\n        approvalComment: this.approvalComment === '自定义原因' ? this.remark : this.approvalComment\n      })\n      \n      if (res.data.code === 1) {\n        this.$message.success('操作成功')\n        this.confirmDialogVisible = false\n        this.requestCode = ''\n        this.confirmStatus = ''\n        this.approvalComment = ''\n        this.init(this.faultStatus)\n      } else {\n        this.$message.error(res.data.msg)\n      }\n    } catch (err) {\n      this.$message.error('请求出错了：' + err.message)\n    }\n  }\n}\n",{"version":3,"sources":["faultClear.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"faultClear.vue","sourceRoot":"src/views/teamLeader/deviceReview","sourcesContent":["<template>\r\n    <div class=\"app-container\">\r\n      <!-- 头部标题 -->\r\n      <HeadLable title=\"故障销号审核\" />\r\n  \r\n      <!-- 流程状态标签 -->\r\n      <div class=\"tabBut\">\r\n        <ul>\r\n          <li\r\n            v-for=\"(item, index) in statusList\"\r\n            :key=\"index\"\r\n            :class=\"{ active: faultStatus === index }\"\r\n            @click=\"handleStatus(index)\"\r\n          >\r\n            {{ item.name }}\r\n            <span v-if=\"item.count\">({{ item.count }})</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  \r\n      <!-- 搜索栏 -->\r\n      <div class=\"search_div\">\r\n        <div class=\"search_div_box\">\r\n          <InputAutoComplete\r\n            :placeholder=\"'请输入设备名称'\"\r\n            @init=\"initProp\"\r\n          />\r\n          <div class=\"search_div_box_but\">\r\n            <el-button\r\n              type=\"primary\"\r\n              @click=\"initFun\"\r\n            >查询</el-button>\r\n            <el-button\r\n              @click=\"resetSearch\"\r\n            >重置</el-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- 表格内容 -->\r\n      <div class=\"table_div\">\r\n        <el-table\r\n          :data=\"tableData\"\r\n          border\r\n          style=\"width: 100%\"\r\n          :header-cell-style=\"{ background: '#F1F3F8' }\"\r\n        >\r\n          <el-table-column\r\n            prop=\"requestCode\"\r\n            label=\"申请编号\"\r\n            width=\"180\"\r\n          />\r\n          <el-table-column\r\n            prop=\"equipmentName\"\r\n            label=\"设备名称\"\r\n            width=\"180\"\r\n          />\r\n          <el-table-column\r\n            prop=\"equipmentType\"\r\n            label=\"设备类型\"\r\n            :formatter=\"row => getEquimentType(row)\"\r\n          />\r\n          <el-table-column\r\n            prop=\"applicantName\"\r\n            label=\"申请人\"\r\n          />\r\n          <el-table-column\r\n            prop=\"applicantDepartment\"\r\n            label=\"申请部门\"\r\n          />\r\n          <el-table-column\r\n            prop=\"applicantPhone\"\r\n            label=\"联系电话\"\r\n          />\r\n          <el-table-column\r\n            prop=\"faultDescription\"\r\n            label=\"故障描述\"\r\n          />\r\n          <el-table-column\r\n            prop=\"createTime\"\r\n            label=\"申请时间\"\r\n          />\r\n          <el-table-column\r\n            prop=\"status\"\r\n            label=\"状态\"\r\n            :formatter=\"row => getFaultStatus(row)\"\r\n          />\r\n          <el-table-column\r\n            label=\"操作\"\r\n            width=\"160\"\r\n          >\r\n            <template slot-scope=\"scope\">\r\n              <el-button\r\n                type=\"text\"\r\n                size=\"small\"\r\n                @click=\"goDetail(scope.row.requestCode, scope.row.status, scope.row)\"\r\n              >查看详情</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n  \r\n        <!-- 分页 -->\r\n        <el-pagination\r\n          v-if=\"counts > 0\"\r\n          :page-sizes=\"[10, 20, 30, 40]\"\r\n          :page-size=\"pageSize\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"counts\"\r\n          class=\"pageList\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n  \r\n      <!-- 详情弹窗 -->\r\n      <el-dialog\r\n        title=\"故障销号详情\"\r\n        :visible.sync=\"dialogVisible\"\r\n        width=\"60%\"\r\n        :before-close=\"handleClose\"\r\n      >\r\n        <el-scrollbar style=\"height: 500px\">\r\n          <div class=\"dialog-body\">\r\n            <div class=\"basic-info\">\r\n              <h3>基本信息</h3>\r\n              <div class=\"info-row\">\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">申请编号：</span>\r\n                  <span class=\"value\">{{ diaForm.requestCode }}</span>\r\n                </div>\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">设备名称：</span>\r\n                  <span class=\"value\">{{ diaForm.equipmentName }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"info-row\">\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">设备类型：</span>\r\n                  <span class=\"value\">{{ getEquimentType(diaForm) }}</span>\r\n                </div>\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">申请人：</span>\r\n                  <span class=\"value\">{{ diaForm.applicantName }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"info-row\">\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">申请部门：</span>\r\n                  <span class=\"value\">{{ diaForm.applicantDepartment }}</span>\r\n                </div>\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">联系电话：</span>\r\n                  <span class=\"value\">{{ diaForm.applicantPhone }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"info-row\">\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">故障描述：</span>\r\n                  <span class=\"value\">{{ diaForm.faultDescription }}</span>\r\n                </div>\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">申请时间：</span>\r\n                  <span class=\"value\">{{ diaForm.createTime }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"info-row\">\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">状态：</span>\r\n                  <span class=\"value\">{{ getFaultStatus(diaForm) }}</span>\r\n                </div>\r\n                <div class=\"info-item\">\r\n                  <span class=\"label\">备注：</span>\r\n                  <span class=\"value\">{{ diaForm.remark || '无' }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-scrollbar>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button v-if=\"dialogFaultStatus === 0\" type=\"primary\" @click=\"passFault(row)\">审核通过</el-button>\r\n          <el-button v-if=\"dialogFaultStatus === 0\" type=\"danger\" @click=\"refuseFault(row)\">审核不通过</el-button>\r\n          <el-button @click=\"dialogVisible = false\">返 回</el-button>\r\n        </span>\r\n      </el-dialog>\r\n  \r\n      <!-- 审核确认弹窗 -->\r\n      <el-dialog\r\n        :title=\"confirmStatus\"\r\n        :visible.sync=\"confirmDialogVisible\"\r\n        width=\"30%\"\r\n      >\r\n        <el-form label-width=\"100px\">\r\n          <el-form-item :label=\"confirmStatus === '审核通过确认' ? '通过原因：' : '驳回原因：'\">\r\n            <el-select v-model=\"approvalComment\" placeholder=\"请选择原因\" style=\"width: 100%\">\r\n              <el-option\r\n                v-for=\"item in confirmStatus === '审核通过确认' ? passReasons : rejectReasons\"\r\n                :key=\"item\"\r\n                :label=\"item\"\r\n                :value=\"item\"\r\n              />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item v-if=\"approvalComment === '自定义原因'\" label=\"自定义原因：\">\r\n            <el-input\r\n              v-model=\"remark\"\r\n              type=\"textarea\"\r\n              :rows=\"3\"\r\n              placeholder=\"请输入自定义原因\"\r\n            />\r\n          </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"confirmDialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"confirmAudit\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\">\r\n  import { Component, Vue } from 'vue-property-decorator'\r\n  import HeadLable from '@/components/HeadLable/index.vue'\r\n  import InputAutoComplete from '@/components/InputAutoComplete/index.vue'\r\n  import {\r\n    getFaultClearList,\r\n    getFaultClearListBy4Status,\r\n    queryFaultClearById,\r\n    auditFaultClear,\r\n    refuseFaultClear\r\n  } from '@/api/faultClear' // 假设有这些API，实际使用时需要替换为真实的API\r\n  \r\n  @Component({\r\n    name: 'FaultClear',\r\n    components: {\r\n      HeadLable,\r\n      InputAutoComplete\r\n    }\r\n  })\r\n  export default class extends Vue {\r\n    private equipmentName: string = ''\r\n    private counts: number = 0\r\n    private page: number = 1\r\n    private pageSize: number = 10\r\n    private tableData: any[] = []\r\n    private faultStatus: number = 0 // 0-全部审核请求 1-待完成 2-待审核 3-已完成\r\n    private dialogVisible: boolean = false\r\n    private confirmDialogVisible: boolean = false\r\n    private diaForm: any = {}\r\n    private row: any = {}\r\n    private requestCode: string = ''\r\n    private dialogFaultStatus: number = 0\r\n    private confirmStatus: string = ''\r\n    private approvalComment: string = ''\r\n    private remark: string = ''\r\n    private statusList: any[] = [\r\n      { name: '全部审核请求', count: 0 },\r\n      { name: '待完成', count: 0 },\r\n      { name: '待审核', count: 0 },\r\n      { name: '已完成', count: 0 }\r\n    ]\r\n    private passReasons: string[] = ['设备已修复', '故障已解决', '问题已处理', '自定义原因']\r\n    private rejectReasons: string[] = ['信息不完整', '需要补充材料', '申请不符合规定', '自定义原因']\r\n  \r\n    created() {\r\n      this.init()\r\n      this.getFaultClearListBy4Status()\r\n    }\r\n  \r\n    // 初始化数据\r\n    private async init(activeIndex: number = this.faultStatus) {\r\n      const params = {\r\n        page: this.page,\r\n        pageSize: this.pageSize,\r\n        equipmentName: this.equipmentName,\r\n        status: activeIndex\r\n      }\r\n      try {\r\n        const res = await getFaultClearList(params)\r\n        if (res.data.code === 1) {\r\n          this.tableData = res.data.data.records\r\n          this.faultStatus = activeIndex\r\n          this.counts = Number(res.data.data.total)\r\n          this.getFaultClearListBy4Status()\r\n        } else {\r\n          this.$message.error(res.data.msg)\r\n        }\r\n      } catch (err) {\r\n        this.$message.error('请求出错了：' + err.message)\r\n      }\r\n    }\r\n  \r\n    // 获取四种状态的数量\r\n    private async getFaultClearListBy4Status() {\r\n      try {\r\n        const res = await getFaultClearListBy4Status()\r\n        if (res.data.code === 1) {\r\n          this.statusList[0].count = res.data.data.all || 0\r\n          this.statusList[1].count = res.data.data.pending || 0\r\n          this.statusList[2].count = res.data.data.toBeReviewed || 0\r\n          this.statusList[3].count = res.data.data.completed || 0\r\n        }\r\n      } catch (err) {\r\n        console.error('获取状态数量失败：', err)\r\n      }\r\n    }\r\n  \r\n    // 切换状态标签\r\n    private handleStatus(index: number) {\r\n      this.page = 1\r\n      this.init(index)\r\n    }\r\n  \r\n    // 搜索设备名称\r\n    private initProp(val: string) {\r\n      this.equipmentName = val\r\n      this.initFun()\r\n    }\r\n  \r\n    // 执行搜索\r\n    private initFun() {\r\n      this.page = 1\r\n      this.init()\r\n    }\r\n  \r\n    // 重置搜索\r\n    private resetSearch() {\r\n      this.equipmentName = ''\r\n      this.page = 1\r\n      this.init()\r\n    }\r\n  \r\n    // 分页大小变化\r\n    private handleSizeChange(val: number) {\r\n      this.pageSize = val\r\n      this.init()\r\n    }\r\n  \r\n    // 页码变化\r\n    private handleCurrentChange(val: number) {\r\n      this.page = val\r\n      this.init()\r\n    }\r\n  \r\n    // 关闭弹窗\r\n    private handleClose() {\r\n      this.dialogVisible = false\r\n    }\r\n  \r\n    // 获取故障状态文本\r\n    private getFaultStatus(row: any) {\r\n      if (row.status === 0) {\r\n        return '待审核'\r\n      } else if (row.status === 1) {\r\n        return '待完成'\r\n      } else if (row.status === 2) {\r\n        return '已完成'\r\n      } else if (row.status === 3) {\r\n        return '已驳回'\r\n      } else {\r\n        return '状态错误'\r\n      }\r\n    }\r\n  \r\n    // 获取设备类型文本\r\n    private getEquimentType(row: any) {\r\n      if (row.equipmentType === 1) {\r\n        return '客服设备'\r\n      } else if (row.equipmentType === 2) {\r\n        return '机电设备'\r\n      } else if (row.equipmentType === 3) {\r\n        return '消防设备'\r\n      } else if (row.equipmentType === 4) {\r\n        return '电梯设备'\r\n      } else {\r\n        return '状态错误'\r\n      }\r\n    }\r\n  \r\n    // 查看详情\r\n    private async goDetail(id: string, status: number, row: any) {\r\n      this.diaForm = {}\r\n      this.dialogVisible = true\r\n      this.dialogFaultStatus = status\r\n      this.requestCode = id\r\n      try {\r\n        const { data } = await queryFaultClearById({ requestCode: id })\r\n        if (data.code === 1) {\r\n          this.diaForm = data.data\r\n          this.row = row\r\n        } else {\r\n          this.$message.error(data.msg)\r\n        }\r\n      } catch (err) {\r\n        this.$message.error('请求出错了：' + err.message)\r\n      }\r\n    }\r\n  \r\n    // 审核通过\r\n    private passFault(row: any) {\r\n      this.confirmDialogVisible = true\r\n      this.requestCode = row.requestCode\r\n      this.confirmStatus = '审核通过确认'\r\n      this.dialogFaultStatus = row.status\r\n      this.dialogVisible = false\r\n      this.approvalComment = ''\r\n      this.remark = ''\r\n    }\r\n  \r\n    // 审核不通过\r\n    private refuseFault(row: any) {\r\n      this.confirmDialogVisible = true\r\n      this.requestCode = row.requestCode\r\n      this.confirmStatus = '审核不通过确认'\r\n      this.dialogFaultStatus = row.status\r\n      this.dialogVisible = false\r\n      this.approvalComment = ''\r\n      this.remark = ''\r\n    }\r\n  \r\n    // 确认审核\r\n    private async confirmAudit() {\r\n      if (!this.approvalComment) {\r\n        return this.$message.error(`请选择${this.confirmStatus}原因`)\r\n      } else if (this.approvalComment === '自定义原因' && !this.remark) {\r\n        return this.$message.error(`请输入${this.confirmStatus}原因`)\r\n      }\r\n  \r\n      const api = this.confirmStatus === '审核不通过确认' ? refuseFaultClear : auditFaultClear\r\n      try {\r\n        const res = await api({\r\n          requestCode: this.requestCode,\r\n          status: this.confirmStatus === '审核不通过确认' ? 3 : 1,\r\n          approvalComment: this.approvalComment === '自定义原因' ? this.remark : this.approvalComment\r\n        })\r\n        \r\n        if (res.data.code === 1) {\r\n          this.$message.success('操作成功')\r\n          this.confirmDialogVisible = false\r\n          this.requestCode = ''\r\n          this.confirmStatus = ''\r\n          this.approvalComment = ''\r\n          this.init(this.faultStatus)\r\n        } else {\r\n          this.$message.error(res.data.msg)\r\n        }\r\n      } catch (err) {\r\n        this.$message.error('请求出错了：' + err.message)\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style lang=\"scss\" scoped>\r\n  .app-container {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .tabBut {\r\n    margin-bottom: 20px;\r\n    \r\n    ul {\r\n      display: flex;\r\n      list-style: none;\r\n      padding: 0;\r\n      margin: 0;\r\n      \r\n      li {\r\n        padding: 10px 20px;\r\n        margin-right: 10px;\r\n        background-color: #f5f7fa;\r\n        border-radius: 4px;\r\n        cursor: pointer;\r\n        \r\n        &.active {\r\n          background-color: #409EFF;\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  .search_div {\r\n    margin-bottom: 20px;\r\n    \r\n    &_box {\r\n      display: flex;\r\n      align-items: center;\r\n      \r\n      &_but {\r\n        margin-left: 10px;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .table_div {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .pageList {\r\n    margin-top: 20px;\r\n    text-align: right;\r\n  }\r\n  \r\n  .dialog-body {\r\n    padding: 20px;\r\n    \r\n    .basic-info {\r\n      h3 {\r\n        margin-top: 0;\r\n        padding-bottom: 10px;\r\n        border-bottom: 1px solid #eee;\r\n      }\r\n      \r\n      .info-row {\r\n        display: flex;\r\n        margin-bottom: 15px;\r\n        \r\n        .info-item {\r\n          flex: 1;\r\n          \r\n          .label {\r\n            color: #606266;\r\n            margin-right: 10px;\r\n          }\r\n          \r\n          .value {\r\n            font-weight: bold;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </style>"]}]}