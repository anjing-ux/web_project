{"remainingRequest":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\teamLeader\\deviceReview\\testingAcceptance\\addTask.vue?vue&type=script&lang=ts&","dependencies":[{"path":"G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\teamLeader\\deviceReview\\testingAcceptance\\addTask.vue","mtime":1748442667870},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport { Component, Vue } from 'vue-property-decorator'\r\nimport { submitDetectionTask } from '@/api/fault'\r\n\r\n@Component({\r\n  name: 'addDetectionTask'\r\n})\r\nexport default class extends Vue {\r\n  private actionType: string = ''\r\n  private ruleForm = {\r\n    deviceId: '',\r\n    taskName: '',\r\n    executorId: '',\r\n    executorName: '',\r\n    startTime: '',\r\n    endTime: ''\r\n  }\r\n\r\n  get rules() {\r\n    return {\r\n      deviceId: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入设备ID'));\r\n          } else {\r\n            const reg = /^[0-9a-zA-Z]+$/; // 不能包含中文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('设备ID不能包含中文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      taskName: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入任务名称'));\r\n          } else {\r\n            const reg = /[\\u4e00-\\u9fa5]/; // 不能为纯英文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('任务名称不能为纯英文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      executorId: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入执行人ID'));\r\n          } else {\r\n            const reg = /^[0-9a-zA-Z]+$/; // 不能包含中文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('执行人ID不能包含中文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      executorName: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入执行人姓名'));\r\n          } else {\r\n            const reg = /[\\u4e00-\\u9fa5]/; // 不能为纯英文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('执行人姓名不能为纯英文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      startTime: {\r\n        required: true,\r\n        message: '请选择开始时间',\r\n        trigger: 'change'\r\n      },\r\n      endTime: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请选择结束时间'));\r\n          } else if (this.ruleForm.startTime && value < this.ruleForm.startTime) {\r\n            callback(new Error('结束时间不能早于开始时间'));\r\n          } else {\r\n            callback();\r\n          }\r\n        },\r\n        trigger: 'change'\r\n      }\r\n    }\r\n  }\r\n\r\n  created() {\r\n    this.actionType = this.$route.query.id ? 'edit' : 'add'\r\n    if (this.actionType == 'edit') {\r\n      this.init()\r\n    }\r\n  }\r\n\r\n  private async init() {\r\n    // 编辑模式下获取任务详情\r\n  }\r\n\r\n  public submitForm(formName: any, st: any) {\r\n    ; (this.$refs[formName] as any).validate((valid: any) => {\r\n      if (valid) {\r\n        let prams = { ...this.ruleForm } as any\r\n        submitDetectionTask(prams)\r\n          .then(res => {\r\n            if (res && res.data && res.data.code === 1) {\r\n              this.$message.success('任务下发成功！')\r\n              this.$router.push({ path: '/teamLeader/deviceReview/faultClear' })\r\n              if (!st) {\r\n                this.$router.push({ path: '/teamLeader/deviceReview/faultClear' })\r\n              } else {\r\n                ; (this as any).$refs.ruleForm.resetFields()\r\n                this.ruleForm = {\r\n                  deviceId: '',\r\n                  taskName: '',\r\n                  executorId: '',\r\n                  executorName: '',\r\n                  startTime: '',\r\n                  endTime: ''\r\n                } as any\r\n              }\r\n            } else {\r\n              this.$message.error(res.data.msg)\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.$message.error('请求出错了：' + err.message)\r\n          })\r\n      } else {\r\n        return this.$message.error('表单校验失败，请检查输入内容');\r\n      }\r\n    })\r\n  }\r\n}\r\n",{"version":3,"sources":["addTask.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"addTask.vue","sourceRoot":"src/views/teamLeader/deviceReview/testingAcceptance","sourcesContent":["<template>\r\n  <div class=\"addBrand-container\">\r\n    <div class=\"container\">\r\n      <el-form ref=\"ruleForm\" :model=\"ruleForm\" :rules=\"rules\" :inline=\"true\" label-width=\"180px\" class=\"demo-ruleForm\">\r\n        <div>\r\n          <el-form-item label=\"设备ID:\" prop=\"deviceId\">\r\n            <el-input v-model=\"ruleForm.deviceId\" placeholder=\"请输入设备ID\" maxlength=\"50\" />\r\n          </el-form-item>\r\n        </div>\r\n        <div>\r\n          <el-form-item label=\"任务名称:\" prop=\"taskName\">\r\n            <el-input v-model=\"ruleForm.taskName\" placeholder=\"请输入任务名称\" maxlength=\"100\" />\r\n          </el-form-item>\r\n        </div>\r\n        <div>\r\n          <el-form-item label=\"执行人ID:\" prop=\"executorId\">\r\n            <el-input v-model=\"ruleForm.executorId\" placeholder=\"请输入执行人ID\" maxlength=\"50\" />\r\n          </el-form-item>\r\n        </div>\r\n        <div>\r\n          <el-form-item label=\"执行人姓名:\" prop=\"executorName\">\r\n            <el-input v-model=\"ruleForm.executorName\" placeholder=\"请输入执行人姓名\" maxlength=\"50\" />\r\n          </el-form-item>\r\n        </div>\r\n        <div>\r\n          <el-form-item label=\"开始时间:\" prop=\"startTime\">\r\n            <el-date-picker\r\n              v-model=\"ruleForm.startTime\"\r\n              type=\"datetime\"\r\n              placeholder=\"选择开始时间\"\r\n              value-format=\"yyyy-MM-dd HH:mm:ss\"\r\n              format=\"yyyy-MM-dd HH:mm:ss\"\r\n            />\r\n          </el-form-item>\r\n        </div>\r\n        <div>\r\n          <el-form-item label=\"结束时间:\" prop=\"endTime\">\r\n            <el-date-picker\r\n              v-model=\"ruleForm.endTime\"\r\n              type=\"datetime\"\r\n              placeholder=\"选择结束时间\"\r\n              value-format=\"yyyy-MM-dd HH:mm:ss\"\r\n              format=\"yyyy-MM-dd HH:mm:ss\"\r\n            />\r\n          </el-form-item>\r\n        </div>\r\n        <div class=\"subBox\">\r\n          <el-form-item>\r\n            <el-button @click=\"() => $router.back()\">\r\n              取消\r\n            </el-button>\r\n            <el-button type=\"primary\" :class=\"{ continue: actionType === 'add' }\"\r\n              @click=\"submitForm('ruleForm', false)\">\r\n              下发任务\r\n            </el-button>\r\n          </el-form-item>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue } from 'vue-property-decorator'\r\nimport { submitDetectionTask } from '@/api/fault'\r\n\r\n@Component({\r\n  name: 'addDetectionTask'\r\n})\r\nexport default class extends Vue {\r\n  private actionType: string = ''\r\n  private ruleForm = {\r\n    deviceId: '',\r\n    taskName: '',\r\n    executorId: '',\r\n    executorName: '',\r\n    startTime: '',\r\n    endTime: ''\r\n  }\r\n\r\n  get rules() {\r\n    return {\r\n      deviceId: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入设备ID'));\r\n          } else {\r\n            const reg = /^[0-9a-zA-Z]+$/; // 不能包含中文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('设备ID不能包含中文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      taskName: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入任务名称'));\r\n          } else {\r\n            const reg = /[\\u4e00-\\u9fa5]/; // 不能为纯英文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('任务名称不能为纯英文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      executorId: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入执行人ID'));\r\n          } else {\r\n            const reg = /^[0-9a-zA-Z]+$/; // 不能包含中文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('执行人ID不能包含中文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      executorName: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请输入执行人姓名'));\r\n          } else {\r\n            const reg = /[\\u4e00-\\u9fa5]/; // 不能为纯英文\r\n            if (!reg.test(value)) {\r\n              callback(new Error('执行人姓名不能为纯英文'));\r\n            } else {\r\n              callback();\r\n            }\r\n          }\r\n        },\r\n        trigger: 'blur'\r\n      },\r\n      startTime: {\r\n        required: true,\r\n        message: '请选择开始时间',\r\n        trigger: 'change'\r\n      },\r\n      endTime: {\r\n        required: true,\r\n        validator: (rule: any, value: string, callback: Function) => {\r\n          if (!value) {\r\n            callback(new Error('请选择结束时间'));\r\n          } else if (this.ruleForm.startTime && value < this.ruleForm.startTime) {\r\n            callback(new Error('结束时间不能早于开始时间'));\r\n          } else {\r\n            callback();\r\n          }\r\n        },\r\n        trigger: 'change'\r\n      }\r\n    }\r\n  }\r\n\r\n  created() {\r\n    this.actionType = this.$route.query.id ? 'edit' : 'add'\r\n    if (this.actionType == 'edit') {\r\n      this.init()\r\n    }\r\n  }\r\n\r\n  private async init() {\r\n    // 编辑模式下获取任务详情\r\n  }\r\n\r\n  public submitForm(formName: any, st: any) {\r\n    ; (this.$refs[formName] as any).validate((valid: any) => {\r\n      if (valid) {\r\n        let prams = { ...this.ruleForm } as any\r\n        submitDetectionTask(prams)\r\n          .then(res => {\r\n            if (res && res.data && res.data.code === 1) {\r\n              this.$message.success('任务下发成功！')\r\n              this.$router.push({ path: '/teamLeader/deviceReview/faultClear' })\r\n              if (!st) {\r\n                this.$router.push({ path: '/teamLeader/deviceReview/faultClear' })\r\n              } else {\r\n                ; (this as any).$refs.ruleForm.resetFields()\r\n                this.ruleForm = {\r\n                  deviceId: '',\r\n                  taskName: '',\r\n                  executorId: '',\r\n                  executorName: '',\r\n                  startTime: '',\r\n                  endTime: ''\r\n                } as any\r\n              }\r\n            } else {\r\n              this.$message.error(res.data.msg)\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.$message.error('请求出错了：' + err.message)\r\n          })\r\n      } else {\r\n        return this.$message.error('表单校验失败，请检查输入内容');\r\n      }\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n<style>\r\n.avatar-uploader .el-icon-plus:after {\r\n  position: absolute;\r\n  display: inline-block;\r\n  content: ' ' !important;\r\n  left: calc(50% - 20px);\r\n  top: calc(50% - 40px);\r\n  width: 40px;\r\n  height: 40px;\r\n  background: url('./../../../../assets/icons/icon_upload@2x.png') center center no-repeat;\r\n  background-size: 20px;\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n// .el-form-item__error {\r\n//   top: 90%;\r\n// }\r\n.addBrand-container {\r\n  .avatar-uploader .el-upload {\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .avatar-uploader .el-upload:hover {\r\n    border-color: #ffc200;\r\n  }\r\n\r\n  .avatar-uploader-icon {\r\n    font-size: 28px;\r\n    color: #8c939d;\r\n    width: 200px;\r\n    height: 160px;\r\n    line-height: 160px;\r\n    text-align: center;\r\n  }\r\n\r\n  .avatar {\r\n    width: 200px;\r\n    height: 160px;\r\n    display: block;\r\n  }\r\n\r\n  // .el-form--inline .el-form-item__content {\r\n  //   width: 293px;\r\n  // }\r\n\r\n  .el-input {\r\n    width: 293px;\r\n  }\r\n\r\n  .address {\r\n    .el-form-item__content {\r\n      width: 777px !important;\r\n    }\r\n  }\r\n\r\n  .el-input__prefix {\r\n    top: 2px;\r\n  }\r\n\r\n  .addDish {\r\n    .el-input {\r\n      width: 130px;\r\n    }\r\n\r\n    .el-input-number__increase {\r\n      border-left: solid 1px #fbe396;\r\n      background: #fffbf0;\r\n    }\r\n\r\n    .el-input-number__decrease {\r\n      border-right: solid 1px #fbe396;\r\n      background: #fffbf0;\r\n    }\r\n\r\n    input {\r\n      border: 1px solid #fbe396;\r\n    }\r\n\r\n    .table {\r\n      border: solid 1px #ebeef5;\r\n      border-radius: 3px;\r\n\r\n      th {\r\n        padding: 5px 0;\r\n      }\r\n\r\n      td {\r\n        padding: 7px 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .addDishList {\r\n    .seachDish {\r\n      position: absolute;\r\n      top: 12px;\r\n      right: 20px;\r\n    }\r\n\r\n    .el-dialog__footer {\r\n      padding-top: 27px;\r\n    }\r\n\r\n    .el-dialog__body {\r\n      padding: 0;\r\n      border-bottom: solid 1px #efefef;\r\n    }\r\n\r\n    .seachDish {\r\n      .el-input__inner {\r\n        height: 40px;\r\n        line-height: 40px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n<style lang=\"scss\" scoped>\r\n.addBrand {\r\n  &-container {\r\n    margin: 30px;\r\n\r\n    .container {\r\n      position: relative;\r\n      z-index: 1;\r\n      background: #fff;\r\n      padding: 30px;\r\n      border-radius: 4px;\r\n      min-height: 500px;\r\n\r\n      .subBox {\r\n        padding-top: 30px;\r\n        text-align: center;\r\n        border-top: solid 1px $gray-5;\r\n      }\r\n\r\n      .el-input {\r\n        width: 350px;\r\n      }\r\n\r\n      .addDish {\r\n        width: 777px;\r\n\r\n        .addBut {\r\n          background: #ffc200;\r\n          display: inline-block;\r\n          padding: 0px 20px;\r\n          border-radius: 3px;\r\n          line-height: 40px;\r\n          cursor: pointer;\r\n          border-radius: 4px;\r\n          color: #333333;\r\n          font-weight: 500;\r\n        }\r\n\r\n        .content {\r\n          background: #fafafb;\r\n          padding: 20px;\r\n          border: solid 1px #d8dde3;\r\n          border-radius: 3px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}