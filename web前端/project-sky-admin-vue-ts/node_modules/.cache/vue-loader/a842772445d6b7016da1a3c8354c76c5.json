{"remainingRequest":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\WarehouseManager\\dashboard\\components\\LineChart.vue?vue&type=script&lang=ts&","dependencies":[{"path":"G:\\device-management\\project-sky-admin-vue-ts\\src\\views\\WarehouseManager\\dashboard\\components\\LineChart.vue","mtime":1748448116000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\device-management\\project-sky-admin-vue-ts\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\nimport { Component, Vue, Prop, Watch } from 'vue-property-decorator';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\n@Component\nexport default class LineChart extends Vue {\n  @Prop({ required: true }) private chartData!: any;\n  \n  private chartInstance: Chart | null = null;\n  \n  mounted() {\n    this.renderChart();\n  }\n  \n  @Watch('chartData', { deep: true })\n  private onChartDataChange() {\n    this.renderChart();\n  }\n  \n  private renderChart() {\n    const ctx = (this.$refs.lineChart as HTMLCanvasElement).getContext('2d');\n    \n    if (this.chartInstance) {\n      this.chartInstance.destroy();\n    }\n    \n    if (ctx) {\n      this.chartInstance = new Chart(ctx, {\n        type: 'line',\n        data: this.chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'top',\n            },\n            tooltip: {\n              mode: 'index',\n              intersect: false,\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                precision: 0\n              }\n            }\n          },\n          interaction: {\n            mode: 'nearest',\n            axis: 'x',\n            intersect: false\n          }\n        }\n      });\n    }\n  }\n  \n  beforeDestroy() {\n    if (this.chartInstance) {\n      this.chartInstance.destroy();\n    }\n  }\n}\n",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/views/WarehouseManager/dashboard/components","sourcesContent":["<template>\r\n    <div class=\"line-chart-container\">\r\n      <canvas ref=\"lineChart\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\">\r\n  import { Component, Vue, Prop, Watch } from 'vue-property-decorator';\r\n  import { Chart, registerables } from 'chart.js';\r\n  \r\n  Chart.register(...registerables);\r\n  \r\n  @Component\r\n  export default class LineChart extends Vue {\r\n    @Prop({ required: true }) private chartData!: any;\r\n    \r\n    private chartInstance: Chart | null = null;\r\n    \r\n    mounted() {\r\n      this.renderChart();\r\n    }\r\n    \r\n    @Watch('chartData', { deep: true })\r\n    private onChartDataChange() {\r\n      this.renderChart();\r\n    }\r\n    \r\n    private renderChart() {\r\n      const ctx = (this.$refs.lineChart as HTMLCanvasElement).getContext('2d');\r\n      \r\n      if (this.chartInstance) {\r\n        this.chartInstance.destroy();\r\n      }\r\n      \r\n      if (ctx) {\r\n        this.chartInstance = new Chart(ctx, {\r\n          type: 'line',\r\n          data: this.chartData,\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              legend: {\r\n                position: 'top',\r\n              },\r\n              tooltip: {\r\n                mode: 'index',\r\n                intersect: false,\r\n              }\r\n            },\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                ticks: {\r\n                  precision: 0\r\n                }\r\n              }\r\n            },\r\n            interaction: {\r\n              mode: 'nearest',\r\n              axis: 'x',\r\n              intersect: false\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    beforeDestroy() {\r\n      if (this.chartInstance) {\r\n        this.chartInstance.destroy();\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .line-chart-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  </style>"]}]}